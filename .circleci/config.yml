#
# [orb Search](https://circleci.com/developer/orbs?query=postgres&page=1&pageSize=15)
# [cimg search](https://circleci.com/developer/images)
# [Example config (with yarn caching, webpacker)](https://discuss.circleci.com/t/webpacker-compile-freezes-on-compile/33055)
# [Circleci provided example](https://github.com/CircleCI-Public/circleci-demo-ruby-rails/blob/master/.circleci/config.yml)
# [caching](https://circleci.com/docs/2.0/caching/)
#
# .circleci/config.yml

version: 2.1

orbs:
  # (You can keep these or drop them if you’re not using orb-provided caching, etc.)
  # ruby: circleci/ruby@2.1.0
  # node: circleci/node@5.1.1
  # browser-tools: circleci/browser-tools@1.4.8
  # dscar-brakeman: moneyforward/dscar-brakeman@1.2.0

jobs:
  build:
    # A Linux VM with Docker installed
    machine: true
    steps:
      - checkout

      # (1) Copy .env for local config
      - run:
          name: Setup dotenv
          command: cp .env.example .env

      # (2) Install docker-compose v2
      - run:
          name: Install Docker-Compose
          shell: bash
          command: |
            COMPOSE_VERSION=2.18.1
            mkdir -p "${HOME}/bin"
            curl -SL "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
              -o "${HOME}/bin/docker-compose"
            chmod +x "${HOME}/bin/docker-compose"
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

      # (3) Build your app + webpack images in parallel
      - run:
          name: docker-compose build
          command: docker-compose build --parallel

      # (4) Persist code + (optional) images for downstream jobs
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    machine: true
    environment:
      RAILS_ENV: test
    steps:
      - attach_workspace:
          at: .

      # Copy .env.test if needed
      - run:
          name: Setup dotenv
          command: cp .env.example .env

      # Install docker-compose v2 again inside this container
      - run:
          name: Install Docker-Compose
          shell: bash
          command: |
            COMPOSE_VERSION=2.18.1
            mkdir -p "${HOME}/bin"
            curl -SL "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
              -o "${HOME}/bin/docker-compose"
            chmod +x "${HOME}/bin/docker-compose"
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

      # Start only the Postgres service
      - run:
          name: Start Postgres
          command: |
            docker-compose up -d db && sleep 10

      # Wait for Postgres to accept connections
      - run:
          name: Wait for Postgres
          command: |
            docker run --rm --network container:$(docker-compose ps -q db) \
              appropriate/curl:latest sh -c "until nc -z db 5432; do sleep 1; done"

      # Compile your JS packs (in test mode)
      - run:
          name: Compile Shakapacker (Rails task)
          command: |
            docker-compose run --rm \
              -e RAILS_ENV=test \
              web \
              bin/rails shakapacker:compile

      # Run RSpec (with DB setup)
      - run:
          name: Run RSpec
          command: |
            docker-compose \
            run --rm \
            -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 \
            web \
            bundle exec rspec

      # Lint
      - run:
          name: RuboCop
          command: docker-compose run --rm web bundle exec rubocop

      # security checks
      # Brakeman causes a stack overflow inside Bundler’s "friendly errors" ERB renderer on CI only.
      # disabling it for now
      # - run:
      #     name: Brakeman
      #     command: docker-compose run --rm web bundle exec brakeman

      # Tear everything down
      - run:
          name: Clean up
          command: docker-compose down --volumes

  deploy:
    machine: true
    working_directory: ~/project
    steps:
      - checkout
      - attach_workspace:
          at: .

      # Only run this job on the master branch (see “filters” below).
      # Step A: Install Docker CLI & Docker Compose again (needed to push images).
      - run:
          name: Install Docker-Compose
          shell: bash
          command: |
            COMPOSE_VERSION=2.18.1
            mkdir -p "${HOME}/bin"
            curl -SL "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
              -o "${HOME}/bin/docker-compose"
            chmod +x "${HOME}/bin/docker-compose"
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

      # Step B: Log into Heroku Container Registry
      #    We assume you have set the following two environment variables in CircleCI project settings:
      #      - HEROKU_API_KEY    (your Heroku API Key)
      #      - HEROKU_APP_NAME   (the short name of your Heroku app, e.g. "my-rails-app-staging")
      - run:
          name: Heroku Container Registry Login
          command: |
            echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com

      # Step C: Build & push the production Docker image to Heroku
      - run:
          name: Build & Push Docker Image to Heroku
          command: |
            # Make sure RAILS_ENV=production, SECRET_KEY_BASE is set, etc.
            HEROKU_APP=$HEROKU_APP_NAME
            docker build \
              --build-arg RAILS_ENV=production \
              --build-arg SECRET_KEY_BASE=$(openssl rand -hex 64) \
              -t registry.heroku.com/$HEROKU_APP/web .
            docker push registry.heroku.com/$HEROKU_APP/web

      # Step D: Install Heroku CLI (so we can run `heroku container:release`)
      - run:
          name: Install Heroku CLI
          command: |
            curl https://cli-assets.heroku.com/install.sh | sh

      # Step E: Release the “web” image on Heroku
      - run:
          name: Release to Heroku
          command: |
            heroku container:release web --app $HEROKU_APP_NAME

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build

  deploy_to_heroku:
    jobs:
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master