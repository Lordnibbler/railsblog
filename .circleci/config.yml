#
# [orb Search](https://circleci.com/developer/orbs?query=postgres&page=1&pageSize=15)
# [cimg search](https://circleci.com/developer/images)
# [Example config (with yarn caching, webpacker)](https://discuss.circleci.com/t/webpacker-compile-freezes-on-compile/33055)
# [Circleci provided example](https://github.com/CircleCI-Public/circleci-demo-ruby-rails/blob/master/.circleci/config.yml)
# [caching](https://circleci.com/docs/2.0/caching/)
#
version: 2.1

orbs:
  # we wonâ€™t actually use the ruby/node orbs any more, but you can keep them
  # for caching steps if you like. everything below is custom Docker instead.

jobs:
  build:
    # use a Linux VM with Docker installed
    machine: true
    steps:
      - checkout

      - run:
          name: Setup dotenv
          command: cp .env.example .env

      # install docker-compose v2
      - run:
          name: Install Docker-Compose
          shell: bash
          command: |
            COMPOSE_VERSION=2.18.1
            mkdir -p "${HOME}/bin"
            curl -SL "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
              -o "${HOME}/bin/docker-compose"
            chmod +x "${HOME}/bin/docker-compose"
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

      # build your app + webpack images in parallel
      - run:
          name: docker-compose build
          command: docker-compose build --parallel

      # stash the code+images for downstream jobs
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    machine: true
    environment:
      RAILS_ENV: test
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Setup dotenv
          command: cp .env.example .env

      # docker-compose is needed here too
      # install docker-compose v2
      - run:
          name: Install Docker-Compose
          shell: bash
          command: |
            COMPOSE_VERSION=2.18.1
            mkdir -p "${HOME}/bin"
            curl -SL "https://github.com/docker/compose/releases/download/v${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" \
              -o "${HOME}/bin/docker-compose"
            chmod +x "${HOME}/bin/docker-compose"
            echo 'export PATH=$HOME/bin:$PATH' >> $BASH_ENV

      # bring up Postgres only
      - run:
          name: Start Postgres
          command: docker-compose up -d db && sleep 10

      # wait for it to be ready
      # - run:
      #     name: Wait for Postgres
      #     command: |
      #       docker run --rm --network container:$(docker-compose ps -q db) \
      #         appropriate/curl:latest sh -c "until nc -z db 5432; do sleep 1; done"

      # setup the test db
      # - run:
      #     name: DB setup
      #     command: |
      #       docker-compose run --rm web bash -lc "bundle exec rails db:setup"

      # compile JS packs
      # - run:
      #     name: Compile Shakapacker
      #     command: docker-compose run --rm webpack bin/shakapacker-dev-server --help

      - run:
          name: Compile Shakapacker (via Rails task)
          command: |
            docker-compose run --rm \
              -e RAILS_ENV=test \
              web \
              bin/rails shakapacker:compile

      # run RSpec
      - run:
          name: Run RSpec
          command: |
            docker-compose \
            run --rm \
            -e DISABLE_DATABASE_ENVIRONMENT_CHECK=1 \
            web \
            bundle exec rspec

      # # optional: lint, security
      # - run:
      #     name: RuboCop
      #     command: docker-compose run --rm web bundle exec rubocop
      # - run:
      #     name: Brakeman
      #     command: docker-compose run --rm web bundle exec brakeman

      # tear everything down
      - run:
          name: Clean up
          command: docker-compose down --volumes

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build